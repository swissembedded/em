' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2017-2018 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO ABL EVCC library
' @VERSION 1.0
' Montage- und Bedienungsanleitung EVCC (ab V2.7)
' Please contact ABL SURSUM for documentation
' Make sure EMDO RS485 is configured with RS485: 38400, 8, 1, n
' Termination needed on both ends (120Ohm), you can use EMDO build in termination
' WARNING: The EVCC controller does have a nominal setting for max charging current, but this value can be overwritten
' by control commands. Pls make sure that the max current is within nominal rating.
' The RS485 does not have a galvanic isolation. Which can be critical when connecting serveral devices
' Some examples on usage
'charger IP
'server$="192.168.0.25"
'start:
' err%=ABLCmd( "RS485:1", 1, param)
' print err% param
' pause 60000
'GOTO start

'@lib_init
FUNCTION __abl_init()
 OPTION LIBRARY abl PRINT ENABLE
 print "Init abl"
END FUNCTION

'@lib_destroy
FUNCTION __abl_destroy()
  PRINT "Deinit abl"
END FUNCTION

' ABL command
' itf$ interface
' addr% address (default 0) 1..8
' cmd% command number
' param
' 0=Reset
' 1=Get revision of firmware, return version
' 2=Get mode, return mode
'  Code-sequence A>B2 (EV connected, E1-FE connected, bBreakCharge-flag cleared)
'  0000>0064>0012>0001>0002>0013>0003>0065>0066>0067>0004
'  Code-sequence B2>C (charging requested by EV)
'  0004>0005
'  Code-sequence C>B’ (charging interrupted by EV)
'  0005>0068>0009
'  Code-sequence B’>A (EV disconnected after charging interrupted)
'  0009>0015>0016>0000
'  A1 0000
'  B1.1 0064>0012>0001
'  B1.2 0002>0013>0003
'  B2 0065>0066>0067>0004 (before 1st charging)
'  B' 0068>0009 (charging interrupted by EV)
'  C 0005
'  D 0006
'  A2 0015>0016>0000 (EV disconnected after charging)
'  E 0033, 0035, 0037,0039
'  A' 0017
' 3=Switch mode to Manual
' 4=Get Status of output, return status
'  0000 all outputs are off
'  0001 LED1 on
'  0002 LED2 on
'  0004 K1 on
'  0008 K2 on
'  0016 K3 on
'  0032 CP high-side-driver on
'  0064 CP low-side-driver on
' 5=Set ouput, cmd parameter
'  0001 LED1
'  0002 LED2
'  0004 K1
'  0008 do not use
'  0016 K3
'  0032 CP high-side-driver
'  0064 CP high-side-driver
' 6=Clear output, cmd parameter
'  0001 LED1
'  0002 LED2
'  0004 K1
'  0008 do not use
'  0016 K3
'  0032 CP high-side-driver
'  0064 CP high-side-driver
' 7=Get ADC-value of pos. Ucp, returns 0.017 x val[V]
' 8=Get ADC-value of neg. Ucp, returns 0.017 x val[V]
' 9=Get ADC-value of Ucs, return 0000...1023
' 10=Get Status of input, returns status
'  0000 none active
'  0001 E1 active
'  0002 E2 active
'  0003 E1 & E2 active
' 11=Get Ic, returns xxxx is PWM scaled 0.1%, IC = PWM×0.6A resp. (PWM-64)×2.5A
' 12=Set Icmax, cmd parameter
'  0000 6A
'  0001 10A
'  0002 13A
'  0003 16A
'  0004 20A
'  0005 30A
'  0006 32A
'  0007 63A
'  0008 70A
'  0009 80A
'  0010 Idefault
'  0080..0970 PWM value 8%...97%
'  0999 charging not allowed (99%)
'  PWM = Idefault/0.6A resp. PWM = 64 + Idefault/2.5A
' 13=Switch PWM on
' 14=Switch PWM off
' 15=Set Idefault
' 22=Set address of device, cmd parameter address 1..8
' 23=Get address of device, returns address 1..8
' 24=Load factory settings and reset, returns version
' 25=Stop charging, leave MANUAL mode, jump to A
' 26=Get Idefault, returns value
'  xxxx is PWM scaled 0.1%
'  Idefault = PWM×0.6A resp. (PWM-64)×2.5A
' 27=Set bBreackCharge-flag
' 28=Clear bBreakCharge-flag
' 29=Get bBreakCharge-flag, return 0000 bBreakCharge=0, 0001 bBreakCharge=1
' 30=Jump to A'
' 31=Restart/Jump to OFF (enabled only in A')
' return value < 0 on error
FUNCTION ABLCmd( itf$, addr%, cmd%, param)
 LOCAL err%, n%, con%, interf$, num$, rq$, rsp$
 interf$=split$(0,itf$,":")
 num$=split$(1,itf$,":")
 ' request
 rq$="!"+right$(str$(addr%),1)+" "+right$("00"+str$(cmd%),2)
 if cmd%=0 OR cmd%=24 then
  rq$=rq$+" 1111"
 else if cmd%=5 OR cmd%=6 OR cmd%=12 OR cmd%=15 then
  rq$=rq$+" "+right$("0000"+str$(cint(param)),4)
 else if cmd%=22 then
  rq$=rq$+" 111"+right$("0"+str$(cint(param)),1)
 endif
 rq$=rq$+chr$(13)+chr$(10)
 ' tranceive over interface
 rsp$=""
 'print "rq$ " rq$
 __cmb
 IF interf$="RS485" THEN
  DO WHILE RS485Read(val(num$)) >=0
  LOOP
  n%=RS485Write(val(num$),rq$)
  rsp$=RS485ReadLn$(val(num$),2000,chr$(13)+chr$(10))
 ELSE
  ' Send it over ethernet
  con%=SocketClient( 1, interf$, val(num$) )
  IF con% >0 THEN
   n%=SocketOption(con%,"SO_RCVTIMEO",2000)
   rsp$=SocketReadLn$(con%,chr$(13)+chr$(10),2000)
   n%=SocketClose( con% )
  ENDIF
 ENDIF
 'print "rsp$ " rsp$
 'Check response
 IF rsp$="" THEN
  ABLCmd=-2
  EXIT FUNCTION
 ENDIF
 IF split$(0,rsp$," ")<>(">"+right$(str$(addr%),1)) OR split$(1,rsp$," ")<>right$("00"+str$(cmd%),2) THEN
  ABLCmd=-3
  EXIT FUNCTION
 ENDIF
 IF cmd%=1 OR cmd%=24 THEN
  param=val(split$(1,rsp$,"V"))
 ELSE IF cmd%=2 OR cmd%=4 OR (cmd%>=7 AND cmd%<=11) OR cmd%=23 OR cmd%=26 OR cmd%=29 THEN
  param=val(split$(2,rsp$," "))
 ELSE
  param=0
 ENDIF
 ABLCmd=0
END FUNCTION

' Convert duty cycle to amp
FUNCTION ABLDutyA( duty )
 ABLDutyA=0
 IF duty < 8 THEN
  ' Charging not allowed
  ABLDutyA=0
 ELSE IF duty < 10 THEN
  ABLDutyA=6
 ELSE IF duty <= 85 THEN
  ABLDutyA=duty*0.6
 ELSE IF duty <=96 THEN
  ABLDutyA=(duty-64)*2.5
 ELSE IF duty <=97 THEN
  ABLDutyA=80
 ELSE
  ' Charging not allowed
  ABLDutyA=0
 ENDIF
END FUNCTION

' Convert amp to duty cycle
FUNCTION ABLADuty( amp )
 ABLADuty=0
 IF amp < 6.0 THEN
  ' Invalid
  ABLADuty = 0
 ELSE IF amp <= 51.0 THEN
  ABLADuty=amp/0.6
 ELSE IF amp <= 80 THEN
  ABLADuty=(amp/2.5)+64
 ELSE IF amp <=80 THEN
  ABLADuty=96
 ELSE
  ' Invalid
  ABLADuty = 0
 ENDIF
END FUNCTION


' ABL EV electric car charger controller default
' This function must be called at least every 60 seconds,
' itf$ abl interface
' slv% slave address of charger (default 0=all)
' curmin% minimal charging current [mA]
' curmax% maximal charging current [mA]
FUNCTION ABLEVControlDflt(itf$, slv%, curmin%, curmax%)
  LOCAL err%, par

  ' Set Icmax
  par=ABLADuty(curmin%/1000.0)*10
  err%=ABLCmd( itf$, slv%, 12, par)
  IF err% THEN
   ABLEVControlDflt=-10
   EXIT FUNCTION
  ENDIF

  ' Set Icdefault
  par=ABLADuty(curmax%/1000.0)*10
  err%=ABLCmd( itf$, slv%, 15, par)
  IF err% THEN
   ABLEVControlDflt=-11
   EXIT FUNCTION
  ENDIF
END FUNCTION

' ABL EV electric car charger controller state
' This function must be called at least every 60 seconds,
' itf$ abl interface
' slv% slave address of charger (default 0=all)
' Pac current AC power
' Eac cummulativ energy of the charging
' NumAc% control loop factor
' curhw% available charging current limited by hardware [mA]
' st$ device status (A..F)
'     A Charger is not connected to car
'     B Charger is connected to car or charging ended
'     C Charging without ventilation
'     E Shutoff, no power
'     F Error
'     U unknown status
FUNCTION ABLEVControlState(itf$, slv%, Pac, Eac, NumAc%, enusr%, curusr%, curhw%, st$)
  LOCAL err%, par, mode%
  ' Read EV Status
  err%=ABLCmd( itf$, slv%, 2, par)
  IF err% THEN
    ABLEVControlState=-10
    EXIT FUNCTION
  ENDIF
  'print "Mode " mode%
  mode%=int(par)
  IF mode%=0 OR mode%=15 OR mode%=16 OR mode%=17 THEN
    st$="A"
  ELSE IF (mode%>=1 AND mode%<=4) OR mode%=9 OR (mode%>=12 AND mode%<=13) OR (mode%>=64 AND mode%<=68)  THEN
    st$="B"
  ELSE IF mode%=5 THEN
    st$="C"
  ELSE IF mode%=6 THEN
    st$="D"
  ELSE IF mode%=33 OR mode%=35 OR mode%=37 OR mode%=39 THEN
    st$="E"
  ELSE
    st$="U"
  ENDIF
  ' Get Ic
  ' The available current Ic is automatically set to the lowest value of Idefault, Icmax and rated current of charging cable
  ' Ic is communicated to the EV by PWM on CP-line
  err%=ABLCmd( itf$, slv%, 11, par)
  IF err% THEN
   ABLEVControlState=-11
   EXIT FUNCTION
  ENDIF
  curusr%=ABLDutyA(par/10.0)*1000.0

  ' Get Break flag
  err%=ABLCmd( itf$, slv%, 29, par)
  IF err% THEN
   ABLEVControlState=-12
   EXIT FUNCTION
  ENDIF
  enusr%=1
  IF par THEN enusr%=0
  Pac=0
  Eac=0
  NumAc%=0
  ABLEVControlState=0
END FUNCTION

' ABL EV electric car charger controller
' This function must be called at least every 60 seconds,
' itf$ abl interface
' slv% slave address of charger (default 0=all)
' en%  enable charger
' cur% charging current [mA]
'     amp x 230V x num of phases = excess energy available for charging
FUNCTION ABLEVControl(itf$, slv%, en%, cur%)
  LOCAL err%, par

  IF en% THEN
    ' Clear bBreakCharge flag
    err%=ABLCmd( itf$, slv%, 28, par)
  ELSE
    ' Set bBreakCharge flag
    err%=ABLCmd( itf$, slv%, 27, par)
  ENDIF
  IF err% THEN
    ABLEVControl=-10
    EXIT FUNCTION
  ENDIF

  ' Set Icmax
  par=ABLADuty(cur%/1000.0)*10
  err%=ABLCmd( itf$, slv%, 12, par)
  IF err% THEN
   ABLEVControl=-11
   EXIT FUNCTION
  ENDIF
  ABLEVControl=0
END FUNCTION

' ABL EV electric car charger controller
' This function must be called at least every 60 seconds,
' The device is not capable to interrupt charging from the Charger side
' itf$ interface
' slv% slave address of charger (default 0)
' rst% restart charging cycle
' en%  enable charger
' amp charging current in Amp
'     amp x 230V x num of phases = excess energy available for charging
' ampmin minimal ampere
' ampmax maximal ampere
' amphw Ic is the minimum of Idefault, Icmax and cable rating (in amp),
'     ABL does not output proximity cable value directly
' st$ device status (A..F)
'     A Charger is not connected to car
'     B Charger is connected to car or charging ended
'     C Charging without ventilation
'     E Shutoff, no power
'     F Error
'     else unknown status
' vs$ version info
FUNCTION ABLEVControlold(itf$,slv%,rst%, en%, amp, ampmin, ampmax, amphw, st$, vs$)
 __cmb
 LOCAL par, mode%, cbf%
 ' Get Version
 err%=ABLCmd( itf$, slv%, 1, par)
 IF err% THEN
  ABLEVControl=-10
  EXIT FUNCTION
 ENDIF
 vs$=str$(par)

 ' Read EV Status
 err%=ABLCmd( itf$, slv%, 2, par)
 IF err% THEN
  ABLEVControl=-11
  EXIT FUNCTION
 ENDIF
 'print "Mode " mode%
 mode%=int(par)
 IF mode%=0 THEN
  st$="A"
 ELSE IF mode%=15 OR mode%=16 THEN
  st$="A"
 ELSE IF mode%=17 THEN
  st$="A"
 ELSE IF mode%=64 OR mode%=12 or mode%=1 THEN
  st$="B"
 ELSE IF mode%=2 OR mode%=13 OR mode%=3 THEN
  st$="B"
 ELSE IF mode%=65 OR mode%=66 OR mode%=67 or mode%=4 THEN
  st$="B"
 ELSE IF mode%=68 OR mode%=9 THEN
  st$="B"
 ELSE IF mode%=5 THEN
  st$="C"
 ELSE IF mode%=6 THEN
  st$="D"
 ELSE IF mode%=33 OR mode%=35 OR mode%=37 OR mode%=39 THEN
  st$="E"
 ELSE IF mode%=17 THEN
  st$="A"
 ELSE
  st$="U"
 ENDIF
 ' Plausibility check, Jump to A' on incorrect current settings
 IF en% AND (amp < 6 OR amp > 80 OR amp < ampmin OR amp > ampmax) THEN
  err%=ABLCmd( itf$, slv%, 30, par)
  ABLEVControl=-12
  EXIT FUNCTION
 ENDIF
 ' Set Icmax
 par=ABLADuty(ampmax)*10
 err%=ABLCmd( itf$, slv%, 12, par)
 IF err% THEN
  ABLEVControl=-13
  EXIT FUNCTION
 ENDIF
 ' Set Icdefault
 par=ABLADuty(amp)*10
 err%=ABLCmd( itf$, slv%, 15, par)
 IF err% THEN
  ABLEVControl=-14
  EXIT FUNCTION
 ENDIF
 ' Get Ic
 ' The available current Ic is automatically set to the lowest value of Idefault, Icmax and rated current of charging cable
 ' Ic is communicated to the EV by PWM on CP-line
 err%=ABLCmd( itf$, slv%, 11, par)
 IF err% THEN
  ABLEVControl=-15
  EXIT FUNCTION
 ENDIF
 amphw=ABLDutyA(par/10.0)
 ' Get Break flag
 err%=ABLCmd( itf$, slv%, 29, par)
 IF err% THEN
  ABLEVControl=-16
  EXIT FUNCTION
 ENDIF
 cbf%=par
 IF en% THEN
  'PRINT "Enable"
  IF cbf% THEN
   'PRINT "Clear cbf"
   ' Clear bBreakCharge flag
   err%=ABLCmd( itf$, slv%, 28, par)
   IF err% THEN
    ABLEVControl=-17
    EXIT FUNCTION
   ENDIF
  ENDIF
  ' We do little trick for restart as forcing to manual mode and then back to restart as cmd 30, 31 does not work
  IF rst% = 1 THEN
   'PRINT "restart"
   ' Set manual mode
   err%=ABLCmd( itf$, slv%, 3, par)
   IF err% THEN
    ABLEVControl=-18
    EXIT FUNCTION
   ENDIF
   ' Restart
   err%=ABLCmd( itf$, slv%, 25, par)
   IF err% THEN
    ABLEVControl=-19
    EXIT FUNCTION
   ENDIF
  ENDIF 'rst%
 ELSE ' en% is low
  ' Jump to A'
  err%=ABLCmd( itf$, slv%, 30, par)
  IF err% THEN
   ABLEVControl=-21
   EXIT FUNCTION
  ENDIF
  ' Set bBreakCharge flag
  err%=ABLCmd( itf$, slv%, 27, par)
  IF err% THEN
   ABLEVControl=-22
   EXIT FUNCTION
  ENDIF
 ENDIF
 ABLEVControl=0
END FUNCTION
