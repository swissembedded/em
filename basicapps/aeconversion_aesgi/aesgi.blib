' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015-2017 swissEmbedded GmbH, All rights reserved.
' AEConversion AESGI protocol V1.7, control microinverters
' INV250, INV350 and INV500 over RS485 (requirement)
' Documentation available from manufacturer on request
' http://www.aeconversion.de/
' Depending on firmware version, some commands do not work
' SYS.Set "rs485", "baud=9600 data=8 stop=1 parity=n term=1"

'@lib_init
FUNCTION __aesgi_init()
 OPTION LIBRARY aesgi PRINT ENABLE
 print "Init aesgi"
END FUNCTION

'@lib_destroy
FUNCTION __aesgi_destroy()
  PRINT "Deinit aesgi"
END FUNCTION

'**
' Function to probe AEConversion inverter
' This takes quite a while
' itf$ interface for communication
' it returns a string of id% with active devices found
FUNCTION AECProbe$(itf$)
 LOCAL err%,rsp$,s$,qy$,id%
 s$=""
 FOR id% = 1 TO 32
  qy$ = "#"+FORMAT$(id%,"%02g")+"9"
  err%=AECWrite(itf$,qy$)
  err%=AECRead(itf$,rsp$)
  IF len(rsp$) >=4 THEN
   id%=val(mid$(rsp$,3,2))
   s$=s$+chr$(id%)
   print "aegsi found id" id%
  ENDIF
 NEXT id%
 AECProbe$=s$
END FUNCTION

'**
' Function to get AEConversion inverter type
' itf$ interface for communication
' id% inverter id 1-32
' tp$ inverter type string e.g. 500-90
' return -1 on error
FUNCTION AECGetType(itf$,id%,tp$)
  LOCAL err%,qy$,rsp$
  qy$ = "#"+FORMAT$(id%,"%02g")+"9"
  err%=AECCom(itf$,qy$,rsp$)
  IF len(rsp$) < 12 THEN
   AECGetType=-1
  ELSE
  AECGetType=0
  ' *149 500-90 3
  '12345678901234
  tp$=MID$(rsp$,7,5)
  ENDIF
END FUNCTION

'**
' Function to get status from AEConversion inverter
' itf$ interface for communication
' id% inverter id 1-32
' st% Status
' Udc dc input voltage V
' Idc dc input current I
' Pdc dc input power Watt
' Uac ac output voltage V
' Iac ac output current A
' Pac ac output power W
' T inverter temperature Â°C
' Ed daily energy Wh
' return -1 on error
FUNCTION AECGetStatus(itf$,id%,st%,Udc,Idc,Pdc,Uac,Iac,Pac,T,Ed)
  LOCAL err%,qy$,rsp$
  qy$ = "#"+FORMAT$(id%,"%02g")+"0"
  err%=AECCom(itf$,qy$,rsp$)
  ' *140   0  54.2  4.10     0 243.3  0.67   217  50     79
  '123456789012345678901234567890123456789012345678901234567890
  IF len(rsp$) = 0 THEN
   AECGetStatus=-1
  ELSE
   st%=VAL(MID$(rsp$,7,3))
   Udc=VAL(MID$(rsp$,11,5))
   Idc=VAL(MID$(rsp$,17,5))
   Pdc=VAL(MID$(rsp$,23,5))
   Uac=VAL(MID$(rsp$,29,5))
   Iac=VAL(MID$(rsp$,35,5))
   Pac=VAL(MID$(rsp$,41,5))
   T=VAL(MID$(rsp$,47,3))
   Ed=VAL(MID$(rsp$,51,6))
   AECGetStatus=0
  ENDIF
END FUNCTION

'**
' Function to set reduced power production from AEConversion inverter
' Note: value is reset on device restart (sporadic restart on net spikes)
' itf$ interface for communication
' id% inverter id 1-32
' frac% fraction of nominal inverter power
FUNCTION AECSetOutputPower(itf$,id%,frac%)
  LOCAL err%,qy$
  qy$ = "#" + FORMAT$(id%,"%02g") + "L "+ FORMAT$(frac%,"%03g")
  ' #14L 050
  ' no response send from inverter
  AECSetOutputPower=AECWrite(itf$,qy$)
END FUNCTION

'**
' Function to set reduced power production from AEConversion inverter
' Broadcast to all devices
' Note: value is reset on device restart (sporadic restart on net spikes)
' itf$ interface for communication
' frac% fraction of nominal inverter power
FUNCTION AECSetOutputPowerB(itf$,frac%)
  LOCAL qy$
  qy$ = "#b018 "+ FORMAT$(frac%,"%03g")
  ' #b018 050
  ' no response send from inverter
  AECSetOutputPowerB=AECWrite(itf$,qy$)
END FUNCTION

'**
' Function to set reduced power production from AEConversion inverter
' Note: value is reset on device restart (sporadic restart on net spikes)
' itf$ interface for communication
' id% inverter id 1-32
' frac% fraction of nominal inverter power
' return -1 on error
FUNCTION AECGetOutputPower(itf$,id%,frac%)
  LOCAL err%,qy$,rsp$
  qy$ = "#" + FORMAT$(id%,"%02g") + "L"
  ' #14L
  err%=AECCom(qy$,rsp$)
  ' *14L 050 0
  '12345678901
  IF len(rsp$) = 0 THEN
   AECGetOutputPower = -1
  ELSE
   frac%=VAL(MID$(rsp$,7,3))
   AECGetOutputPower=0
  ENDIF
END FUNCTION

'**
' Function to autotest grid from AEConversion inverter
' This is not working with my firmware
' itf$ interface for communication
' id% inverter id 1-32
' Ueff effective Voltage AC
' Freq Grid frequency
' UMax upper  voltage
' TUMax% off-grid time
' UMin lower off-grid voltage
' TUMin% off-grid time
' FMin% lower off-grid frequency
' TFMin% lower off-grid time
' FMax upper off-grid frequency
' TFMax% lower off-grid time
' Res% result
' return -1 on error
FUNCTION AECGetAutotest(itf$,id%,Ueff,Freq,UMax,TUMax%,UMin,TUMin%,FMin,TFMin%,FMax,TFMax%,Res%)
  LOCAL err%,qy$,rsp$,d
  qy$ = "#" + FORMAT$(id%,"%02g") + "A"
  ' #14A
  err%=AECCom(qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECGetAutotest = -1
  ELSE
   AECGetAutotest=0
   Ueff=VAL(MID$(rsp$,7,5))
   Freq=VAL(MID$(rsp$,13,4))
   UMax=VAL(MID$(rsp$,18,5))
   TUMax%=VAL(MID$(rsp$,24,4))
   UMin=VAL(MID$(rsp$,29,5))
   TUMin%=VAL(MID$(rsp$,35,4))
   d=VAL(MID$(rsp$,40,5))
   IF d <> 0 THEN
    FMin=1502500.0/d
   ELSE
    FMin=-1
   ENDIF
   TFMin%=VAL(MID$(rsp$,46,4))
   d=VAL(MID$(rsp$,51,5))
   IF d <> 0 THEN
    FMax=1502500.0/d
   ELSE
    FMax=-1
   ENDIF
   TFMax%=VAL(MID$(rsp$,57,4))
   Res%=VAL(MID$(rsp$,62,5))
  ENDIF
END FUNCTION

'**
' Function to read off-grid parameter range from AEConversion inverter
' itf$ interface for communication
' id% inverter id 1-32
' Ueff effective Voltage AC
' Freq Grid frequency
' UMax upper  voltage
' TUMax% off-grid time
' UMin lower off-grid voltage
' TUMin% off-grid time
' FMin% lower off-grid frequency
' TFMin% lower off-grid time
' FMax upper off-grid frequency
' TFMax% lower off-grid time
' return -1 on error
FUNCTION AECGetOffGridParams(itf$,id%,Ueff,Freq,UMax,TUMax%,UMin,TUMin%,FMin,TFMin%,FMax,TFMax%)
  LOCAL err%,qy$,rsp$,d
  qy$="#"+FORMAT$(id%,"%02g")+"P"
  err%=AECCom(qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECGetOffGridParams=-1
  ELSE
   AECGetOffGridParams=0
   ' *14P 230.0 50.0 264.5 0140 184.0 0140 31631 0160 29186 0160 
   '123456789012345678901234567890123456789012345678901234567890
   Ueff=VAL(MID$(rsp$,7,5))
   Freq=VAL(MID$(rsp$,13,4))
   UMax=VAL(MID$(rsp$,18,5))
   TUMax%=VAL(MID$(rsp$,24,4))
   UMin=VAL(MID$(rsp$,29,5))
   TUMin%=VAL(MID$(rsp$,35,4))
   d=VAL(MID$(rsp$,40,5))
   IF d <> 0 THEN
    FMin=1502500.0/d
   ELSE
    FMin=-1
   ENDIF
   TFMin%=VAL(MID$(rsp$,46,4))
   d=VAL(MID$(rsp$,51,5))
   IF d <> 0 THEN
    FMax=1502500.0/d
   ELSE
    FMin=-1
   ENDIF
   TFMax%=VAL(MID$(rsp$,57,4))
  ENDIF
END FUNCTION

'**
' Function to read error log from AEConversion inverter
' We can log up to 6 events
' itf$ interface for communication
' id% inverter id 1-32
' st% inverter status, -1 = no response
' T1% time since start
' EC1% errorcode
' T2% time since start
' EC2% errorcode
' T3% time since start
' EC3% errorcode
' T4% time since start
' EC4% errorcode
' T5% time since start
' EC5% errorcode
' T6% time since start
' EC6% errorcode
' return -1 on error
FUNCTION AECGetErrorLog(itf$,id%,T%,EC1%,T1%,EC2%,T2%,EC3%,T3%,EC4%,T4%,EC5%,T5%,EC6%,T6%)
  LOCAL err%,qy$,rsp$
  qy$="#"+FORMAT$(id%,"%02g")+"F"
  err%=AECCom(itf$, qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECGetErrorLog=-1
  ELSE
   ' *14F 23004 018 11012 018 11017 018 11798 018 11799 018 11801 018 11803
   '123456789012345678901234567890123456789012345678901234567890123456789012
   AECGetErrorLog=0
   T%=VAL(MID$(rsp$,7,5))
   EC1%=VAL(MID$(rsp$,13,3))
   T1%=VAL(MID$(rsp$,17,5))
   EC2%=VAL(MID$(rsp$,23,3))
   T2%=VAL(MID$(rsp$,27,5))
   EC3%=VAL(MID$(rsp$,33,3))
   T3%=VAL(MID$(rsp$,37,5))
   EC4%=VAL(MID$(rsp$,43,3))
   T4%=VAL(MID$(rsp$,47,5))
   EC5%=VAL(MID$(rsp$,53,3))
   T5%=VAL(MID$(rsp$,57,5))
   EC6%=VAL(MID$(rsp$,63,3))
   T6%=VAL(MID$(rsp$,67,3))
  ENDIF
END FUNCTION

'**
' Function to set current limit from AEConversion inverter
' itf$ interface for communication
' id% inverter id 1-32
' Idc set DC current limit for output
' (see inverter datasheet for range)
' return -1 on error
FUNCTION AECSetCurrentLimit(itf$,id%,Idc)
  LOCAL err%,qy$,rsp$,cur$
  cur$=FORMAT$(Idc,"%02.1f")
  IF len(cur$)=3 THEN
   cur$ = "0"+cur$
  ENDIF
  qy$ = "#" + FORMAT$(id%,"%02g") + "S "+ cur$
  err%=AECCom( itf$, qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECSetCurrentLimit=-1
  ELSE
   ' *14S  0.5
   '1234567890123
   AECSetCurrentLimit=0
   Idc=VAL(MID$(rsp$,7,4))
  ENDIF
END FUNCTION


'**
' Function to get current limit from AEConversion inverter
' itf$ interface for communication
' id% inverter id 1-32
' Idc set DC current limit for output
' (see inverter datasheet for range)
' return -1 on error
FUNCTION AECGetCurrentLimit(itf$,id%,Idc)
  LOCAL err%,qy$,rsp$
  qy$ = "#" + FORMAT$(id%,"%02g") + "S"
  err%=AECCom( itf$,qy$,rsp$)
  ' *14S  0.0
  '123456789012345
  IF len(rsp$) = 0 THEN
   AECGetCurrentLimit=-1
  ELSE
   AECGetCurrentLimit=0
   Idc=VAL(MID$(rsp$,7,4))
  ENDIF
END FUNCTION

'**
' Function to set operation mode from AEConversion inverter
' Note: value is reset on device restart (sporadic restart on net spikes)
' itf$ interface for communication
' id% inverter id 1-32
' mode% 0=mppt mode, 2=voltage mode
' Udc min voltage where the inverter stops operating
' (see inverter datasheet for range)
' return -1 on error
FUNCTION AECSetOperationMode(itf$,id%,mode%,Udc)
  LOCAL err%,qy$,rsp$,volt$
  volt$=FORMAT$(Udc,"%02.1f")
  IF len(volt$)=3 THEN
   volt$ = "0"+volt$
  endif
  qy$ = "#" + FORMAT$(id%,"%02g") + "B "+ FORMAT$(mode%,"%01g")+" "+volt$
  err%=AECCom(itf$,qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECSetOperationMode = -1
  ELSE
   ' *14B 0  0.0
   '123456789012345
   AECSetOperationMode= 0
   mode%=VAL(MID$(rsp$,7,1))
   Udc=VAL(MID$(rsp$,9,4))
  ENDIF
END FUNCTION

'**
' Function to get operation mode from AEConversion inverter
' Note: value is reset on device restart (sporadic restart on net spikes)
' itf$ interface for communication
' id% inverter id 1-32
' mode% 0=mppt mode, 2=voltage mode
' Udc min voltage where the inverter stops operating
' (see inverter datasheet for range)
' return -1 on error
FUNCTION AECGetOperationMode(itf$,id%,mode%,Udc)
  LOCAL err%,qy$,rsp$
  qy$ = "#" + FORMAT$(id%,"%02g") + "B"
  err%=AECCom(itf$,qy$,rsp$)
  IF len(rsp$) = 0 THEN
   AECGetOperationMode=-1
  ELSE
   ' *14B 0  0.0
   '123456789012345
   AECGetOperationMode=0
   mode%=VAL(MID$(rsp$,7,1))
   Udc=VAL(MID$(rsp$,9,4))
   ' device might return wrong mode due to firmware error
   ' if it returns a voltage it is in voltage mode
   IF Udc<>0.0 AND mode%=0 THEN
    mode%=2
   ENDIF
  ENDIF
END FUNCTION

'**
' Function to communicate with AEConversion inverter
' itf$ interface for communication
' qy$ query send to inverter
' rsp$ response from the inverter
FUNCTION AECCom(itf$,qy$,rsp$ )
 LOCAL err%, n%
 err%=AECDrop(itf$)
 err%=AECWrite(itf$,qy$)
 err%=AECRead(itf$,rsp$)
 IF len(rsp$) <= 3 THEN
  AECCom=-1
 ENDIF
 AECCom=0
END FUNCTION

'**
' Function to communicate with AEConversion inverter (write only)
' itf$ interface for communication
' qy$ query send to inverter
FUNCTION AECWrite(itf$,qy$)
 LOCAL interf$, num%
 interf$=split$(0,itf$,":")
 num%=val(split$(1,itf$,":"))
 AECWrite = RS485Write(num%,qy$,13)
END FUNCTION

'**
' Function to communicate with AEConversion inverter (read only)
' itf$ interface for communication
' qy$ query send to inverter
FUNCTION AECRead(itf$,rsp$)
 LOCAL interf$, num%,n%
 interf$=split$(0,itf$,":")
 num%=val(split$(1,itf$,":"))
 rsp$ = RS485ReadLn$(num%,3000,CHR$(13))
 n%=len(rsp$)
 IF n%=0 THEN
  AECRead=-1
 ELSE
  AECRead=n%
 ENDIF
END FUNCTION

'**
' Function to communicate with AEConversion inverter (read only)
' itf$ interface for communication
' rsp$ response from the inverter
FUNCTION AECDrop(itf$)
 LOCAL interf$, num%
 interf$=split$(0,itf$,":")
 num%=val(split$(1,itf$,":"))
 DO WHILE RS485Read(num%) >=0
 LOOP
 AECDrop=0
END FUNCTION
