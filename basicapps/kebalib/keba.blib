' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2017-2018 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO Keba EV Charger control P20, P30, BMW wallbox
' @VERSION 1.0
' Please make sure the Keba station is configured correctly
' Make sure DIP-switch DWS1.3 = ON
' http://www.keba.com/en/emobility/service-support/downloads/Downloads
' UDP Programmer's Guide V2.0
' If you have problems, pls ensure that latest firmware is installed on your Keba
' Test commands with netcat e.g. echo -n "display 0 0 0 0 12346,6" | nc -p 7090 -u 192.168.10.21 7090
' Some examples on usage
'charger IP
'server$="192.168.0.25"
'start:
' err%=KEBAInfo( server$, info$)
' print err% info$
' pause 60000
'GOTO start

' KEBA UDP command "i"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' info$ firmware and model info
' return value < 0 on error
FUNCTION KEBAInfo( server$, info$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAInfo=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "i")
 rsp$=KEBASocketReadLn$(con%,2000)
 n%=SocketClose( con% )
 IF rsp$="" THEN
  KEBAInfo=-2
  EXIT FUNCTION
 ENDIF
 info$=mid$(rsp$, 13, len(rsp$)-13)
 KEBAInfo=0
END FUNCTION

' KEBA UDP command "failsafe"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' tmo% timeout to enter failsafe mode during charging if no KEBAEnable or KEBACurrent is send
' maxcur% max charging current in mA during failsafe mode 0, 6000-63000
' sv% 0=enable until next startup of charger, 1=enable failsafe at startup of charger
' return value < 0 on error
FUNCTION KEBAFailsafe( server$, tmo%, maxcur%, sv%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAFailsafe=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "failsafe "+str$(tmo%)+" "+str$(maxcur%)+" "+str$(sv%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAFailsafe=-2
  EXIT FUNCTION
 ENDIF
 KEBAFailsafe=0
END FUNCTION

' KEBA UDP command "report1"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' id$ ID of the retrieved report
' prod$ model name
' ser$ serial number
' firm$ firmware version
' com% communication module installed(P30 only)
' sec% current clock (P30 only)
' return value < 0 on error
FUNCTION KEBAReport1( server$, id$, prod$, ser$, firm$, com%, sec% )
 LOCAL err%, n%, m%, con%, rsp$
 LOCAL coms$, secs$

 LOCAL ida$(2) LENGTH 15 = (chr$(34)+"ID"+chr$(34)+": "+chr$(34),chr$(34),"id$")
 LOCAL proda$(2) LENGTH 15 = (chr$(34)+"Product"+chr$(34)+": "+chr$(34),chr$(34),"prod$")
 LOCAL sera$(2) LENGTH 15 = (chr$(34)+"Serial"+chr$(34)+": "+chr$(34),chr$(34),"ser$")
 LOCAL firma$(2) LENGTH 15 = (chr$(34)+"Firmware"+chr$(34)+":"+chr$(34),chr$(34),"firm$")
 ' P30 only
 LOCAL coma$(2) LENGTH 15 = (chr$(34)+"COM-module"+chr$(34)+": ",",","coms$")
 LOCAL seca$(2) LENGTH 15 = (chr$(34)+"Sec"+chr$(34)+": ", "}", "secs$")

 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAReport1=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "report 1")

 id$=""
 prod$=""
 ser$=""
 firm$=""
 coms$="0"
 secs$="0"

 n%=StreamSearch(SocketRead(con%),"ida$","proda$","sera$","firma$","coma$","seca$",5000)
 m%=SocketClose( con% )
 ' P30 or P20
 IF (n% AND 1)=0 THEN
  KEBAReport1=-2
  EXIT FUNCTION
 ENDIF
 com%=val(coms$)
 sec%=val(secs$)
 KEBAReport1=0
END FUNCTION

' KEBA UDP command "report 2"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' id$ ID of the retrieved report
' st% current state of the wallbox
' err1% detail code state 4
' err2% detail code state 4
' plug% current condition of loading connection
' ensys% enable state for charging
' enuser% enable condition via UDP
' maxcur% pilot max current in milliampere
' maxcurp% pilot max in 0.1%
' curhw% highest possible charging current
' curusr% user current
' curfs% current failsafe function
' tmofs% timeout failsafe
' curtim% current preset curtimer (P30 only)
' tmoct% remaining time to accept current value (P30 only)
' se% set energy limit (P30 only)
' out% relay output x2
' inp% input x1
' ser$ serial number
' sec% system clock since wallbox start
' return value < 0 on error
FUNCTION KEBAReport2( server$,id$,st%,err1%,err2%,plug%,ensys%,enuser%,maxcur%,maxcurp%,curhw%,curusr%,curfs%,tmofs%,curtim%,tmoct%,se%,out%,inp%,ser$,sec%)
 LOCAL err%, n%, m%, con%, rsp$
 LOCAL ida$(2) LENGTH 10 = (chr$(34)+"ID"+chr$(34)+": "+chr$(34), chr$(34), "id$")
 LOCAL sta$(2) LENGTH 10 = (chr$(34)+"State"+chr$(34)+": ", ",", "sts$")
 LOCAL erra1$(2) LENGTH 15 = (chr$(34)+"Error1"+chr$(34)+": ", ",", "errs1$")
 LOCAL erra2$(2) LENGTH 15 = (chr$(34)+"Error2"+chr$(34)+": ", ",", "errs2$")
 LOCAL pluga$(2) LENGTH 15 = (chr$(34)+"Plug"+chr$(34)+": ", ",", "plugs$")
 LOCAL ensysa$(2) LENGTH 15 = (chr$(34)+"Enable sys"+chr$(34)+": ", ",", "ensyss$")
 LOCAL enusera$(2) LENGTH 15 = (chr$(34)+"Enable user"+chr$(34)+": ", ",", "enusers$")
 LOCAL maxcura$(2) LENGTH 15 = (chr$(34)+"Max curr"+chr$(34)+": ", ",", "maxcurs$")
 LOCAL maxcurpa$(2) LENGTH 15 = (chr$(34)+"Max curr %"+chr$(34)+": ", ",", "maxcurps$")
 LOCAL curhwa$(2) LENGTH 15 = (chr$(34)+"Curr HW"+chr$(34)+": ", ",", "curhws$")
 LOCAL curusra$(2) LENGTH 15 = (chr$(34)+"Curr user"+chr$(34)+": ", ",", "curusrs$")
 LOCAL curfsa$(2) LENGTH 15 = (chr$(34)+"Curr FS"+chr$(34)+": ", ",", "curfss$")
 LOCAL tmofsa$(2) LENGTH 15 = (chr$(34)+"Tmo FS"+chr$(34)+": ", ",", "tmofss$")
 LOCAL curtima$(2) LENGTH 15 = (chr$(34)+"Curr timer"+chr$(34)+": ", ",", "curtims$")
 LOCAL tmocta$(2) LENGTH 15 = (chr$(34)+"Tmo CT"+chr$(34)+": ", ",", "tmocts$")
 LOCAL sea$(2) LENGTH 15 = (chr$(34)+"Setenergy"+chr$(34)+": ", ",", "ses$")
 LOCAL outa$(2) LENGTH 15 = (chr$(34)+"Output"+chr$(34)+": ", ",", "outs$")
 LOCAL inpa$(2) LENGTH 15 = (chr$(34)+"Input"+chr$(34)+": ", ",", "inps$")
 LOCAL sera$(2) LENGTH 15 = (chr$(34)+"Serial"+chr$(34)+": "+chr$(34), chr$(34), "ser$")
 LOCAL seca$(2) LENGTH 15 = (chr$(34)+"Sec"+chr$(34)+": ", "}", "secs$")

 LOCAL ids$,sts$,errs1$,errs2$,plugs$,ensyss$,enusers$
 LOCAL maxcurs$,maxcurps$,curhws$,curusrs$,curfss$
 LOCAL tmofss$,curtims$,tmocts$,ses$,outs$,inps$,sers$,secs$

 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAReport2=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "report 2")

 id$=""
 sts$="0"
 errs1$="0"
 errs2$="0"
 plugs$="0"
 ensyss$="0"
 enusers$="0"

 maxcurs$="0"
 maxcurps$="0"
 curhws$="0"
 curusrs$="0"
 curfss$="0"

 tmofss$="0"
 curtims$="0"
 tmocts$="0"
 ses$="0"
 outs$="0"
 inps$="0"
 ser$=""
 secs$="0"

 n%=StreamSearch(SocketRead(con%),"ida$","sta$","erra1$","erra2$","pluga$","ensysa$","enusera$","maxcura$","maxcurpa$","curhwa$","curusra$","curfsa$","tmofsa$","curtima$","tmocta$","sea$","outa$","inpa$","sera$","seca$",5000)
 m%=SocketClose( con% )
 ' P30 or P20
 IF (n% AND 1)=0 THEN
  KEBAReport2=-2
  EXIT FUNCTION
 ENDIF
 st%=val(sts$)
 err1%=val(errs1$)
 err2%=val(errs2$)
 plug%=val(plugs$)
 ensys%=val(ensyss$)
 enuser%=val(enusers$)
 maxcur%=val(maxcurs$)
 maxcurp%=val(maxcurps$)
 curhw%=val(curhws$)
 curusr%=val(curusrs$)
 curfs%=val(curfss$)
 tmofs%=val(tmofss$)
 curtim%=val(curtims$)
 tmoct%=val(tmocts$)
 se%=val(ses$)
 out%=val(outs$)
 inp%=val(inps$)
 sec%=val(secs$)
 KEBAReport2=0
END FUNCTION

' KEBA UDP command "report 3"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' id$ ID of the retrieved report
' U1% voltage phase 1
' U2% voltage phase 2
' U3% voltage phase 3
' I1% current phase 1
' I2% current phase 2
' I3% current phase 3
' P% real power in mW
' PF% power factor in 0.1%
' E% power consumption in 0.1Wh for loading session
' Etot% Total power consumption in 0.1Wh without current loading session
' ser$ serial number
' sec% system clock since wallbox start
' return value < 0 on error
FUNCTION KEBAReport3( server$, id$, U1%, U2%, U3%, I1%, I2%, I3%, P%, PF%, E%, Etot%, ser$, sec%)
 LOCAL err%, n%, m%, con%, rsp$
 LOCAL ida$(2) LENGTH 15 = (chr$(34)+"ID"+chr$(34)+": "+chr$(34), chr$(34), "id$")
 LOCAL Ua1$(2) LENGTH 15 = (chr$(34)+"U1"+chr$(34)+": ", ",", "Us1$")
 LOCAL Ua2$(2) LENGTH 15 = (chr$(34)+"U2"+chr$(34)+": ", ",", "Us2$")
 LOCAL Ua3$(2) LENGTH 15 = (chr$(34)+"U3"+chr$(34)+": ", ",", "Us3$")
 LOCAL Ia1$(2) LENGTH 15 = (chr$(34)+"I1"+chr$(34)+": ", ",", "Is1$")
 LOCAL Ia2$(2) LENGTH 15 = (chr$(34)+"I2"+chr$(34)+": ", ",", "Is2$")
 LOCAL Ia3$(2) LENGTH 15 = (chr$(34)+"I3"+chr$(34)+": ", ",", "Is3$")
 LOCAL Pa$(2) LENGTH 15 = (chr$(34)+"P"+chr$(34)+": ", ",", "Ps$")
 LOCAL PFa$(2) LENGTH 15 = (chr$(34)+"PF"+chr$(34)+": ", ",", "PFs$")
 LOCAL Ea$(2) LENGTH 15 = (chr$(34)+"E pres"+chr$(34)+": ", ",", "Es$")
 LOCAL Etota$(2) LENGTH 15 = (chr$(34)+"E total"+chr$(34)+": ", ",", "Etots$")
 LOCAL sera$(2) LENGTH 15 = (chr$(34)+"Serial"+chr$(34)+": "+chr$(34), chr$(34), "ser$")
 LOCAL seca$(2) length 15 = (chr$(34)+"Sec"+chr$(34)+": ", "}", "secs$")

 LOCAL Us1$, Us2$, Us3$
 LOCAL Is1$, Is2$, Is3$
 LOCAL Ps$, PFs$, Es$, Etots$
 LOCAL secs$

 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAReport3=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "report 3")

 id$=""
 Us1$="0"
 Us2$="0"
 Us3$="0"

 Is1$="0"
 Is2$="0"
 Is3$="0"
 Ps$="0"
 PFs$="0"
 Es$="0"
 Etots$="0"
 ser$=""
 secs$="0"
 n%=StreamSearch(SocketRead(con%),"ida$","Ua1$","Ua2$","Ua3$","Ia1$","Ia2$","Ia3$","Pa$","PFa$","Ea$","Etota$","sera$","seca$",5000)
 m%=SocketClose( con% )

 IF (n% AND 1)=0 THEN
  KEBAReport3=-2
  EXIT FUNCTION
 ENDIF
 U1%=val(Us1$)
 U2%=val(Us1$)
 U3%=val(Us1$)
 I1%=val(Is1$)
 I2%=val(Is2$)
 I3%=val(Is3$)
 P%=val(Ps$)
 PF%=val(PFs$)
 E%=val(Es$)
 Etot%=val(Etots$)
 sec%=val(secs$)
 KEBAReport3=0
END FUNCTION

' KEBA UDP command "report 100"
' P30,BMW wallbox
' server$ ip address of the charger
' off% history offset 0..30
' id$ ID calling report
' sess% session counter
' curhw% highest possible charging current
' estart% total energy at start
' epres% delivered energy
' started% session started timestamp
' ended% session ended timestamp
' reason% reason session has ended
' tag$ rfid tag
' clss$ rfid class
' ser$ serial number
' sec% system clock since wallbox start
' return value < 0 on error
FUNCTION KEBAReport100( server$, off%, id$, sess%, curhw%, estart%, epres%, started%, ended%, reason%, tag$, clss$, ser$, sec%)
 LOCAL err%, n%, m%, con%, rsp$
 LOCAL ida$(2) LENGTH 15 = (chr$(34)+"ID"+chr$(34)+": "+chr$(34), chr$(34), "id$")
 LOCAL sessa$(2) LENGTH 15 = (chr$(34)+"Session ID"+chr$(34)+": ", "}", "sesss$")
 LOCAL curhwa$(2) LENGTH 15 = (chr$(34)+"Curr HW   "+chr$(34)+": ", ",", "curhws$")
 LOCAL estarta$(2) LENGTH 15 = (chr$(34)+"E Start   "+chr$(34)+": ", ",", "estarts$")
 LOCAL epresa$(2) LENGTH 15 = (chr$(34)+"E Pres    "+chr$(34)+": ", ",", "epress$")
 LOCAL starteda$(2) LENGTH 15 = (chr$(34)+"started[s]"+chr$(34)+": ", ",", "starteds$")
 LOCAL endeda$(2) LENGTH 15 = (chr$(34)+"ended[s]  "+chr$(34)+": ", ",", "endeds$")
 LOCAL reasona$(2) LENGTH 15 = (chr$(34)+"reason "+chr$(34)+": ", ",", "reasons$")
 LOCAL taga$(2) LENGTH 15 = (chr$(34)+"RFID tag"+chr$(34)+": "+chr$(34), chr$(34), "tag$")
 LOCAL clssa$(2) LENGTH 15 = (chr$(34)+"RFID class"+chr$(34)+": "+chr$(34), chr$(34), "clss$")
 LOCAL sera$(2) LENGTH 15 = (chr$(34)+"Serial"+chr$(34)+": "+chr$(34), chr$(34), "ser$")
 LOCAL seca$(2) LENGTH 15 = (chr$(34)+"Sec"+chr$(34)+": ", "}", "secs$")

 LOCAL sesss$, curhws$, estarts$, epress$
 LOCAL starteds$, endeds$
 LOCAL reasons$, clsss$
 LOCAL secs$

 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAReport100=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "report "+str$(100+off%))

 id$=""
 sesss$="0"
 curhws$="0"
 estarts$="0"
 epress$="0"

 starteds$="0"
 endeds$="0"
 reasons$="0"
 tag$=""
 clss$=""
 ser$=""
 secs$="0"
 n%=StreamSearch(SocketRead(con%),"ida$","sessa$","curhwa$", "estarta$", "epresa$", "starteda$","endeda$", "reasona$","taga$","clssa$", "sera$","seca$", 5000)
 m%=SocketClose( con% )

 IF (n% AND 1)=0 THEN
  KEBAReport100=-2
  EXIT FUNCTION
 ENDIF
 sess%=val(sesss$)
 curhw%=val(curhws$)
 estart%=val(estarts$)
 epres%=val(epress$)
 started%=val(starteds$)
 ended%=val(endeds$)
 reason%=val(reasons$)
 sec%=val(secs$)
 KEBAReport100=0
END FUNCTION

' KEBA UDP command "ena"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' en% enable or disable 0=disabled, 1=enabled
' return value < 0 on error
FUNCTION KEBAEnable( server$, en%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAEnable=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "ena "+str$(en%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAEnable=-2
  EXIT FUNCTION
 ENDIF
 KEBAEnable=0
END FUNCTION

' KEBA UDP command "curr"
' P20,P30,BMW wallbox
' server$ ip address of the charger
' cur% current in mA range 6000...63000
' return value < 0 on error
FUNCTION KEBACurrent( server$, cur%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBACurrent=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "curr "+str$(cur%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBACurrent=-2
  EXIT FUNCTION
 ENDIF
 KEBACurrent=0
END FUNCTION

' KEBA UDP command "output"
' P30,BMW wallbox
' server$ ip address of the charger
' out% output 0=open, 1=closed
' return value < 0 on error
FUNCTION KEBAOutput( server$, out%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAOutput=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "output "+str$(out%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAOutput=-2
  EXIT FUNCTION
 ENDIF
 KEBAOutput=0
END FUNCTION

' KEBA UDP command "currtime"
' P30,BMW wallbox
' server$ ip address of the charger
' cur% current in mA range 6000...63000
' dly% delay in seconds 860400 max
' return value < 0 on error
FUNCTION KEBACurrentTime( server$, cur%, dly%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBACurrentTime=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "currtime "+str$(cur%)+" "+str$(dly%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBACurrentTime=-2
  EXIT FUNCTION
 ENDIF
 KEBACurrentTime=0
END FUNCTION

' KEBA UDP command "setenergy"
' P30,BMW wallbox
' server$ ip address of the charger
' egy% charging energy limit in 0.1Wh ,0=no limit
' return value < 0 on error
FUNCTION KEBAEnergy( server$, egy%)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAEnergy=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "setenergy "+str$(egy%))
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAEnergy=-2
  EXIT FUNCTION
 ENDIF
 KEBAEnergy=0
END FUNCTION

' KEBA UDP command "start"
' P30,BMW wallbox
' server$ ip address of the charger
' tag$ rfid tag
' clss$ rfid classifier
' return value < 0 on error
FUNCTION KEBAStart( server$, tag$, clss$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAStart=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "start "+tag$+" "+clss$)
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAStart=-2
  EXIT FUNCTION
 ENDIF
 KEBAStart=0
END FUNCTION

' KEBA UDP command "stop"
' P30,BMW wallbox
' server$ ip address of the charger
' tok$ rfid token
' return value < 0 on error
FUNCTION KEBAStop( server$, tok$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAStop=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "stop "+tok$)
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAStop=-2
  EXIT FUNCTION
 ENDIF
 KEBAStop=0
END FUNCTION

' KEBA UDP command "display"
' P30
' server$ ip address of the charger
' act% activate the usage
' min% minimal duration for text display
' max% maximal duration for text display
' txt$ text 23 chars max
' return value < 0 on error
FUNCTION KEBADisplay( server$, act%, min%, max%, txt$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBADisplay=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "display "+str$(act%)+" "+str$(min%)+" "+str$(max%)+" 0 "+txt$)
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBADisplay=-2
  EXIT FUNCTION
 ENDIF
 KEBADisplay=0
END FUNCTION

' KEBA UDP command "unlock"
' send ena 0 command prior to unlock!
' P20,P30,BMW wallbox
' server$ ip address of the charger
' return value < 0 on error
FUNCTION KEBAUnlock( server$)
 LOCAL err%, n%, con%, rsp$
 con%=SocketClient( 0, server$, 7090, 7090 )
 IF con% < 0 THEN
  KEBAUnlock=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",2000)
 n%=SocketWrite( con%, "unlock")
 rsp$=SocketReadLn$(con%,chr$(10),2000)
 n%=SocketClose( con% )
 IF rsp$="" OR mid$(rsp$,5,2)<>"OK" THEN
  KEBAUnlock=-2
  EXIT FUNCTION
 ENDIF
 KEBAUnlock=0
END FUNCTION

' KEBA EV electric car charger controller state
' This function must be called at least every 60 seconds,
' server$ device ip address
' Pac current AC power
' Eac cummulativ energy of the charging
' NumAc% control loop factor
' curhw% available charging current limited by hardware [mA]
' st$ device status (A..F)
'     A Charger is not connected to car
'     B Charger is connected to car or charging ended
'     C Charging without ventilation
'     E Shutoff, no power
'     F Error
'     U unknown status
FUNCTION KEBAEVControlState(server$, Pac, Eac, NumAc%, enusr%, curusr%, curhw%, st$)
  __cmb
  LOCAL err%, id$, stat%, dmy%, plug%, ensys%, maxcur%, curfs%, dmys$, cur%
  ' Read EV Status
  err%=KEBAReport2( server$,id$,stat%,dmy%,dmy%,plug%,ensys%,enusr%,maxcur%,dmy%,curhw%,curusr%, curfs%, dmy%, dmy%, dmy%, dmy%,dmy%,dmy%,dmys$,dmy%)
  IF err% THEN
   KEBAEVControlState=err%
   EXIT FUNCTION
  ENDIF
  ' Current state of the charging station
  ' 0 : starting
  ' 1 : not ready for charging; e.g. unplugged, X1 or "ena" not enabled, RFID not enabled,.....
  ' 2 : ready for charging; waiting for EV charging request (S2)
  ' 3 : charging
  ' 4 : error
  ' 5 : authorization rejected
  ' "Plug" = Current condition of the loading connection
  ' 0 unplugged
  ' 1 plugged on charging station
  ' 3 plugged on charging station plug locked
  ' 5 plugged on charging station plugged on EV
  ' 7 plugged on charging station plug locked plugged on EV
  ' map to IEC 61851
  ' A – standby (vehicle not connected)
  ' B – vehicle detected
  ' C – ready (charging)
  ' D – with ventilation (charging with ventilation, not supported)
  IF plug%<=3 AND stat%<3 THEN
   st$="A"
  ELSE IF plug%<>7 OR (plug%=7 AND stat%<=2)THEN
   st$="B"
  ELSE IF plug%=7 AND stat%=3 THEN
   st$="C"
  ELSE IF stat%>=4 THEN
   st$="F"
  ELSE
   st$="U"
  ENDIF
  PRINT "KEBAControlState", plug%, stat%, curhw%

  LOCAL U1%, U2%, U3%, I1%, I2%, I3%, P%, PF%, E%, Etot%, ser$, sec%, I
  err%=KEBAReport3( server$, id$, U1%, U2%, U3%, I1%, I2%, I3%, P%, PF%, E%, Etot%, ser$, sec%)
  Pac = P%/1000000.0 ' mW to kW
  Eac = E%/10000.0 ' 0.1Wh to kWh
  NumAc%=0
  IF I1% > 500 THEN NumAc% = NumAc%+1
  IF I2% > 500 THEN NumAc% = NumAc%+1
  IF I3% > 500 THEN NumAc% = NumAc%+1
  KEBAEVControlState=err%
END FUNCTION

' KEBA EV electric car charger controller
' This function must be called at least every 60 seconds,
' server$ device ip address
' en%  enable charger
' cur% charging current [mA]
'     amp x 230V x num of phases = excess energy available for charging
FUNCTION KEBAEVControl(server$, en%, cur%)
 __cmb
 LOCAL err%, id$, stat%, dmy%, plug%, enusr%, ensys%, maxcur%, curusr%, curfs%, dmys$
 ' Read EV Status
 err%=KEBAReport2( server$,id$,stat%,dmy%,dmy%,plug%,ensys%,enusr%,maxcur%,dmy%,curhw%,curusr%, curfs%, dmy%, dmy%, dmy%, dmy%,dmy%,dmy%,dmys$,dmy%)
 IF err% THEN
  KEBAEVControl=err%
  EXIT FUNCTION
 ENDIF

 PRINT "KEBAEVControl", en%, cur%, plug%, stat%, enusr%, curhw%, curusr%
 ' Set the current
 err%=KEBACurrent( server$, cur%)
 IF err% THEN
  KEBAEVControl=err%
  EXIT FUNCTION
 ENDIF

 IF enusr% <> en% THEN
  ' Enable / disable the charger
  err%=KEBAEnable( server$, en%)
  IF err% THEN
    KEBAEVControl=err%
    EXIT FUNCTION
  ENDIF
 ENDIF
 KEBAEVControl=0
END FUNCTION

FUNCTION KEBASocketReadLn$(con%,tm%)
  LOCAL st%, ed%, rt$, md%
  st% = Ticks()
  ed% = st% + tm%
  rt$=""
  md%=0
  DO WHILE Ticks()< ed%
      ' end of line is } , LF or "":""
      ch% = SocketRead(con%)
      IF ch% >= 0 THEN rt$=rt$+chr$(ch%)
      IF ch%=125 THEN EXIT DO
      IF ch%=44 THEN EXIT DO
      IF ch%=10 THEN EXIT DO
      IF (ch%=34 AND md%<2) OR (ch%=34 AND md%>2) THEN md%=md%+1
      IF ch%=58 AND md%=2 THEN md%=md%+1
      IF md%=5 THEN EXIT DO
  LOOP
  KEBASocketReadLn$=rt$
END FUNCTION
