' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015 - 2017 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO http lib to access devices over REST and JSON
' @VERSION 1.0
' Documentation RFC2616 and others

'@lib_init
FUNCTION __http_init()
 OPTION LIBRARY http PRINT ENABLE
 print "Init http"
END FUNCTION

'@lib_destroy
FUNCTION __http_destroy()
  PRINT "Deinit http"
END FUNCTION


' Connect to  a http server
' server$ server name ( ip or dns), e.g. www.google.com or 192.168.2.3
' port%   server port default 80
' con%    Server connection
' cmd$    GET, PUT, DELETE, POST....
' qry$    query string e.g. /report
' conn$   Connection type close or keep-alive
' acc$    Accept string e.g. text/html,application/xml or Content-Length
' tmo%    Timeout in ms
' auth$   basic autorization key in base64 encoding
' return error code if negative value
FUNCTION HTTPRequest(server$, port%, con%, cmd$, qry$, conn$, acc$, tmo%, auth$)
 LOCAL n%, a$
 ' default server port is 80
 IF port% = 0 THEN
  port = 80
 ENDIF
 ' Open connection to the server
 con%=SocketClient( 1, server$, port% )
 IF con% < 0 THEN
  PRINT "Connect to " server$ " failed"
  HTTPRequest=con%
  EXIT FUNCTION
 ENDIF
 ' set timeout
 n%=SocketOption(con%,"SO_RCVTIMEO",tmo%)
 ' default is HTTP GET
 IF cmd$="" THEN
  cmd$="GET"
 ENDIF
 ' default close conn at the end
 IF conn$="" THEN
  conn$="close"
 ENDIF
 ' accept string
 IF cmd$="GET" THEN
  IF acc$="" THEN
   acc$="text/html,application/xml"
  ENDIF
  acc$="Accept: "+acc$
 ELSE IF cmd$="POST" OR cmd$="PUT" THEN
  acc$="Content-Length: "+acc$
 ENDIF
 a$=""
 IF len(auth$) >0 THEN
  a$="Authorization: Basic "+auth$+chr$(13)+chr$(10)
 ENDIF
 ' Write request
 n%=SocketWrite( con%,  cmd$," ", qry$, " HTTP/1.1",13,10,"Host: ",server$, 13,10, a$, "Connection: close",13,10,acc$,13,10,13,10 )
 IF n% < 0 THEN
  PRINT "Write problem" con%
  HTTPRequest=n%
 ENDIF
 HTTPRequest=0
END FUNCTION

' Read response string from http server
' con% Server connection
' return error code if negative value
FUNCTION HTTPResponse(con%)
 LOCAL rsp%
 ' Read until timeout or closed
 rsp%=SocketRead(con%)
 'if rsp% >=0 THEN print chr$(rsp%) rsp%
 HTTPResponse=rsp%
END FUNCTION

' Close http server
' con% Server connection
' return error code if negative value
FUNCTION HTTPClose(con%)
 LOCAL err%
 ' Close connection again
 err%=SocketClose( con% )
 HTTPClose=0
END FUNCTION

' Convert a value from
' sec$ xml section string
' attr$ xml attribute string
' def$ default value if attribute is not found
' nl% characters to remove from the left
' nr% characters to remove from the right
' returns value
FUNCTION HTTPGetValue$(sec$, attr$, def$, nl%, nr%)
 LOCAL s$(3), ss$, n%
 s$(0)=attr$+"="+chr$(34)
 s$(1)=chr$(34)
 s$(2)="ss$"
 ss$=def$
 n%=StreamSearch(sec$,"s$",0)
 IF n% <> 1 THEN
  ss$=def$
 ENDIF
 'print n% s$(0) ss$ len(ss$)
 HTTPGetValue$=mid$(ss$,nl%+1,len(ss$)-nl%-nr%)
END FUNCTION

' Read response string from http server until token found
' con% Server connection
' token$ token to searcg
' state% state of the reader
' return error code if negative value
FUNCTION HTTPReadToken(con%, token$, state%)
 LOCAL rsp%
 ' Read until timeout or closed
 'print "con " con%
 rsp%=SocketRead(con%)
 'print "con " con% "rsp " rsp%
 IF rsp%<0 THEN
  ' end of stream
  state%=-1
 ELSE IF state%=0 AND chr$(rsp%)=mid$(token$, state%+1,1) THEN
   state%=state%+1
   IF state%=len(token$) THEN
    state%=0
	rsp%=-1
   ENDIF
 ELSE
  state%=0
 ENDIF
 HTTPReadToken=rsp%
END FUNCTION
