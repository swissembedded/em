' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2017 swissEmbedded GmbH, All rights reserved.
' @DESCRIPTION EMDO Lametric library
' @VERSION 1.0
' Please make sure the Lametric display is configured correctly.
' This lib only send device notifications over ethernet
' http://lametric-documentation.readthedocs.io/en/latest/reference-docs/device-notifications.html#display-notification
' To get a, follow the instructions here:
' http://lametric-documentation.readthedocs.io/en/latest/reference-docs/device-authorization.html
' The key must be converted to base64(dev:key)
' Icons see, instead of # use i as name
'https://developer.lametric.com/icons
' Some examples on usage
'Loading Http library, make sure it is installed on EMDO
'LIBRARY LOAD "http"
'Adjust server IP and username to your bridge setting (see developers url below for details)
'server$="192.168.0.33"
'key$="yourkey"
'start:
' err%=LMMakeSimpleFrame(frm$,"i7421","Car fully charged")
' print "LMMakeSimpleFrame" err%
' err%=LMSendNotification( server$,key$,notid$, "critical","alert",1000,1,"notifications","car",2,frm$,"","","","" )
' print "LMSendNotification" err%
' pause 20000
' err%=LMDelNotification(server$,key$,notid$)
' print "LMDeleteNotification" err%
 ' can be used e.g. for battery state
 'err%=LMMakeGoalFrame(frm$,"i6363",0,90,100)
 'print "LMGoalFrame" err%
 'err%=LMSendNotification( server$,key$,notid$, "info","none",1000,1,"notifications","energy",2,frm$,"","","","" )
 'print "LMSendNotification" err%
 'pause 20000
 'err%=LMDelNotification(server$,key$,notid$)
 'print "LMDeleteNotification" err%
 ' can be used for simple graphs
 'err%=LMMakeSpikeChart(frm$,"0,10,30,90,100,90,40,10,0")
 'print "LMSpikeChart" err%
 'err%=LMSendNotification( server$,key$,notid$, "warning","info",2000,1,"notifications","statistic",2,frm$,"","","","" )
 'print "LMSendNotification" err%
 'pause 20000
 'err%=LMDelNotification(server$,key$,notid$)
 'print "LMDeleteNotification" err%
'GOTO start

'@lib_init
FUNCTION __lametric_init()
 OPTION LIBRARY lametric PRINT ENABLE
 print "Init lametric"
END FUNCTION

'@lib_destroy
FUNCTION __lametric_destroy()
  PRINT "Deinit lametric"
END FUNCTION

' LaMetric make simpleframe
' frm$ frame that will be generated
' icn$ icon id or base64
' txt$ message
FUNCTION LMMakeSimpleFrame(frm$, icn$, txt$)
 IF (len(icn$)+len(txt$)) > 240 THEN
  LMMakeSimpleFrame=-1
  EXIT FUNCTION
 ENDIF
 frm$="{"+chr$(34)+"icon"+chr$(34)+":"+chr$(34)+icn$+chr$(34)+","+chr$(34)+"text"+chr$(34)+":"+chr$(34)+txt$+chr$(34)+"}"
 LMMakeSimpleFrame=0
END FUNCTION

' LaMetric make goalframe
' frm$ frame that will be generated
' icn$ icon id or base64
' fst start value
' fcur current value
' fend end value
FUNCTION LMMakeGoalFrame(frm$, icn$, fst, fcur, fend)
 LOCAL st$, cu$, en$
 st$=str$(fst)
 cu$=str$(fcur)
 en$=str$(fend)
 IF (len(icn$)+len(st$)+len(cu$)+len(en$)) > 180 THEN
  LMMakeGoalFrame=-1
  EXIT FUNCTION
 ENDIF
 frm$="{"+chr$(34)+"icon"+chr$(34)+":"+chr$(34)+icn$+chr$(34)+", "
 frm$=frm$+chr$(34)+"goalData"+chr$(34)+":{ "
 frm$=frm$+chr$(34)+"start"+chr$(34)+": "+st$+", "
 frm$=frm$+chr$(34)+"current"+chr$(34)+": "+cu$+", "
 frm$=frm$+chr$(34)+"end"+chr$(34)+": "+en$+", "
 frm$=frm$+chr$(34)+"unit"+chr$(34)+": "+chr$(34)+"%"+chr$(34)+" } }"
 LMMakeGoalFrame=0
END FUNCTION

' LaMetric make spike chart
' frm$ frame that will be generated
' arr$ with data e.g. 1,2,3
FUNCTION LMMakeSpikeChart(frm$, arr$)
 IF len(arr$) > 234 THEN
  LMMakeSpikeChart=-1
  EXIT FUNCTION
 ENDIF
 frm$="{" + chr$(34)+"chartData"+chr$(34)+":["+arr$+"]}"
 LMMakeSpikeChart=0
END FUNCTION

' Send notification to Lametric display
' server$ Lametric device ip
' key$ lametric key (base64 encoded)
' notid$ notification id that is returned by display
' prio$ priority info, warning, critical
' cyc% number of times the notification must be displayed, 0=dissmiss needed
' cat$ sound is either notification or alarms
' tp$ icon type none, info, alert
' lt% lifetime in ms of the message
' id$ sound id, e.g. notification, energy, etc.
' rep% number of times the sound is repeated
' frm1$ frame 1, use "" if empty
' frm2$ frame 2, use "" if empty
' frm3$ frame 3, use "" if empty
' frm4$ frame 4, use "" if empty
' frm5$ frame 5, use "" if empty
' return error code if negative value
FUNCTION LMSendNotification( server$,key$,notid$, prio$,tp$,lt%,cyc%,cat$,id$,rep%,frm1$,frm2$,frm3$,frm4$,frm5$ )
 LOCAL err%, con%, url$, pr$,po$, l%, n%,ida$(3),cm1$,cm2$,cm3$,cm4$
 pr$="{"+chr$(34)+"priority"+chr$(34)+":"+chr$(34)+prio$+chr$(34)+","
 pr$=pr$+chr$(34)+"icon_type"+chr$(34)+":"+chr$(34)+tp$+chr$(34)+","
 pr$=pr$+chr$(34)+"lifetime"+chr$(34)+":"+str$(lt%)+","
 pr$=pr$+chr$(34)+"model"+chr$(34)+":{ "
 pr$=pr$+chr$(34)+"cycles"+chr$(34)+":"+str$(cyc%)+","
 pr$=pr$+chr$(34)+"frames"+chr$(34)+":["
 po$="],"+chr$(34)+"sound"+chr$(34)+":{"+chr$(34)+"category"+chr$(34)+":"+chr$(34)+cat$+chr$(34)+","
 po$=po$+chr$(34)+"id"+chr$(34)+":"+chr$(34)+id$+chr$(34)+","
 po$=po$+chr$(34)+"repeat"+chr$(34)+":"+str$(rep%)
 po$=po$+"}}}"
 cm1$=""
 cm2$=""
 cm3$=""
 cm4$=""
 if len(frm1$)>0 and len(frm2$)>0 then cm1$=", "
 if len(frm2$)>0 and len(frm3$)>0 then cm2$=", "
 if len(frm3$)>0 and len(frm4$)>0 then cm3$=", "
 if len(frm4$)>0 and len(frm5$)>0 then cm4$=", "
 l%=len(pr$)+len(frm1$)+len(cm1$)+len(frm2$)+len(cm2$)+len(frm3$)+len(cm3$)+len(frm4$)+len(cm4$)+len(frm5$)+len(po$)
 url$="/api/v2/device/notifications"
 ida$(0)=chr$(34)+"id"+chr$(34)+" : "+chr$(34)
 ida$(1)=chr$(34)
 ida$(2)="notid$"
 err%=HTTPRequest(server$, 8080, con%, "POST",url$, "", str$(l%), 5000,key$)
 IF err% <0 THEN
  print "open failed"
  IF con% >=0 THEN n%=HTTPClose(con%)
  LMSendNotification=-1
  EXIT FUNCTION
 ENDIF
 n%=SocketWrite( con%, pr$,frm1$,cm1$,frm2$,cm2$,frm3$,cm3$,frm4$,cm4$,frm5$,po$)
 'print pr$,frm1$,cm1$,frm2$,cm2$,frm3$,cm3$,frm4$,cm4$,frm5$,po$
 l%=StreamSearch(HTTPResponse(con%),"ida$",5000)
 n%=HTTPClose(con%)
 IF l%<>1 THEN
  LMSendNotification=-2
  EXIT FUNCTION
 ENDIF
 LMSendNotification=0
 END FUNCTION

' Delete notification to Lametric display
' server$ Lametric device ip
' key$ lametric key (base64 encoded)
' notid$ notification id
FUNCTION LMDelNotification( server$,key$,notid$)
 LOCAL err%, con%, n%, url$
 url$="/api/v2/device/notifications/"+notid$
 err%=HTTPRequest(server$, 80, con%, "DELETE",url$, "", "", 5000,key$)
 IF err%<0 THEN
  print "open failed"
  IF con% >=0 THEN n%=HTTPClose(con%)
  LMDelNotification=-1
  EXIT FUNCTION
 ENDIF
 n%=HTTPClose(con%)
 LMDelNotification=0
END FUNCTION
