' This script is an example of the EMDO101 energy manager
' Please visit us at www.swissembedded.com
' Copyright (c) 2015-2019 swissEmbedded GmbH, All rights reserved.
' Kostal Inverter EMDO modbus example
' Documentation available from Kostal (NDA required)
' 20.3.2014

' example
'LIBRARY LOAD "kostal"
'start:
'addr%=255
'server$="192.168.178.17"
'timeout%=2000
' err%=kostalVoltageCurrentPower(server$,addr%, timeout%, Udc1, Idc1, Pdc1, Udc2, Idc2, Pdc2, Udc3, Idc3, Pdc3, Uac1, Iac1, Pac1, Uac2, Iac2, Pac2, Uac3, Iac3, Pac3)
' print "kostal1 ", err%, Udc1, Idc1, Pdc1, Udc2, Idc2, Pdc2, Udc3, Idc3, Pdc3, Uac1, Iac1, Pac1, Uac2, Iac2, Pac2, Uac3, Iac3, Pac3
' err%=kostalTotalEnergy(server$, addr%, timeout%, kWh)
' print "kostal2 ", err%, kWh
' err%=kostalStatus(server$, addr%, timeout%, status%, fault%, code%)
' print "kostal3 ", err%, status%, fault%, code%
' err%=kostalName(server$, addr%, timeout%, iName$)
' print "kostal4 ", err%, iName$
' err%=kostalSerialOld(server$, addr%, timeout%, iSerial$)
' print "kostal5 ", err%, iSerial$
' err%=kostalSerial(server$, addr%, timeout%, iSerial$)
' print "kostal6 ", err%, iSerial$
' err%=kostalDailyEnergy(server$, addr%, timeout%, kWh)
' print "kostal7 ", err%, kWh
' err%=kostalPropertiesOld(server$, addr%, timeout%, sNum%, pNum%)
' print "kostal8 ", err%, sNum%, pNum%
' err%=kostalProperties(server$, addr%, timeout%, tDe$,sNum%, pNum%, pC%)
' print "kostal9 ", err%, tDe$, sNum%, pNum%, pC%
' err%=kostalAnalog(server$, addr%, timeout%, aNa1, aNa2, aNa3, aNa4)
' print "kostal10 ", err%, aNa1, aNa2, aNa3, aNa4
' err%=kostalFeedin(server$, addr%, timeout%, Tfeed%)
' print "kostal11 ", err%, Tfeed%
' pause 30000
' goto start

 '@lib_init
 FUNCTION __kostal_init()
  OPTION LIBRARY kostal PRINT ENABLE
  print "Init kostal"
 END FUNCTION

 '@lib_destroy
 FUNCTION __kostal_destroy()
   PRINT "Deinit kostal"
 END FUNCTION

' Kostal inverter reading voltage, current power
' Server$  IP address of the inverter
' Addr%    inverter address
' Timeout% timeout in ms
' Udc1-3   voltage string 1-3 [V]
' Idc1-3   current string 1-3 [A]
' Putdc1-3 power string 1-3 [kW]
' Uac1-3   voltage phase 1-3 [V]
' Iac1-3   current phase 1-3 [A]
' Putac1-3 power phase 1-3 [kW]
FUNCTION kostalVoltageCurrentPower(server$,addr%, timeout%, Udc1, Idc1, Pdc1, Udc2, Idc2, Pdc2, Udc3, Idc3, Pdc3, Uac1, Iac1, Pac1, Uac2, Iac2, Pac2, Uac3, Iac3, Pac3)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H43, 73, rp$)
 IF err% =0 THEN
  Udc1=conv("ble/i16",mid$(rp$,6,2))/10.0
  Idc1=conv("ble/i16",mid$(rp$,8,2))/100.0
  Pdc1=conv("ble/i16",mid$(rp$,10,2))/1000.0
  Udc2=conv("ble/i16",mid$(rp$,16,2))/10.0
  Idc2=conv("ble/i16",mid$(rp$,18,2))/100.0
  Pdc2=conv("ble/i16",mid$(rp$,20,2))/1000.0
  Udc3=conv("ble/i16",mid$(rp$,26,2))/10.0
  Idc3=conv("ble/i16",mid$(rp$,28,2))/100.0
  Pdc3=conv("ble/i16",mid$(rp$,30,2))/1000.0
  Uac1=conv("ble/i16",mid$(rp$,36,2))/10.0
  Iac1=conv("ble/i16",mid$(rp$,38,2))/100.0
  Pac1=conv("ble/i16",mid$(rp$,40,2))/1000.0
  Uac2=conv("ble/i16",mid$(rp$,44,2))/10.0
  Iac2=conv("ble/i16",mid$(rp$,46,2))/100.0
  Pac2=conv("ble/i16",mid$(rp$,48,2))/1000.0
  Uac3=conv("ble/i16",mid$(rp$,52,2))/10.0
  Iac3=conv("ble/i16",mid$(rp$,54,2))/100.0
  Pac3=conv("ble/i16",mid$(rp$,56,2))/1000.0
 ENDIF
 kostalVoltageCurrentPower=err%
END FUNCTION

' Kostal inverter reading total energy
' server$  IP address of the inverter
' addr%    Inverter address
' timeout% Timeout in ms
' EAc      Inverter Total Energy [kWh]
FUNCTION kostalTotalEnergy(server$, addr%, timeout%, EAc)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H45, 11, rp$)
 IF err% =0 THEN
  EAc=conv("ble/i32",mid$(rp$,6,4))/1000.0
 ENDIF
 kostalTotalEnergy=err%
END FUNCTION

' Kostal inverter status
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' status%  Status of the Inverter
'          0 = Off
'          1 = Idling
'          2 = Starting
'          3 = Feed-in MPP
'          4 = Regulated feed-in
'          5 = Feed-in
' fault%   Inverter fault
'          0 = no fault
'          not 0 fault
' code%    Fault code (only valid if fault% is non zero)
FUNCTION kostalStatus(server$, addr%, timeout%, status%, fault%, code%)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H57, 15, rp$)
 IF err% =0 THEN
  status%=asc(mid$(rp$,6,1))
  fault% = asc(mid$(rp$,7,1))
  code% = conv("ble/i16", mid$(rp$,8,2))
 ENDIF
 kostalStatus=err%
END FUNCTION

' Kostal inverter reading name
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' iName$   Inverter Name
FUNCTION kostalName(server$, addr%, timeout%, iName$)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H44, 22, rp$)
 IF err% =0 THEN
  iName$=mid$(rp$,6,15)
 ENDIF
 kostalName=err%
END FUNCTION

' Kostal inverter serial number (old encoding < version 3.5)
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' iSerial$   Inverter Name
FUNCTION kostalSerialOld(server$, addr%, timeout%, iSerial$)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H50, 12, rp$)
 IF err% =0 THEN
  iSerial$=hex$(asc(mid$(rp$,6,1)))+left$(hex$(asc(mid$(rp$,8,1))),1)+hex$(asc(mid$(rp$,7,1)))+hex$(asc(mid$(rp$,10,1)))+hex$(asc(mid$(rp$,9,1)))
 ENDIF
 kostalSerialOld=err%
END FUNCTION

' Kostal inverter serial number (new encoding >= version 3.5)
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' iSerial$   Inverter Name
FUNCTION kostalSerial(server$, addr%, timeout%, iSerial$)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H50, 20, rp$)
 IF err% =0 THEN
  iSerial$=mid$(rp$,6,13)
 ENDIF
 kostalSerial=err%
END FUNCTION

' Kostal inverter daily energy
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' EAc      Daily Energy [kWh]
FUNCTION kostalDailyEnergy(server$, addr%, timeout%, EAc)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H9D, 11, rp$)
 IF err% =0 THEN
  EAc=conv("ble/i32",mid$(rp$,6,4))/1000.0
 ENDIF
 kostalDailyEnergy=err%
END FUNCTION

' Kostal inverter properties (old encoding version < 4.0)
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' sNum%    Number of Strings
' pNum%    Number of AC Phases
FUNCTION kostalPropertiesOld(server$, addr%, timeout%, sNum%, pNum%)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H90, 31, rp$)
 IF err% =0 THEN
  sNum%=asc(mid$(rp$,22,1))
  pNum%=asc(mid$(rp$,29,1))
 ENDIF
 kostalPropertiesOld=err%
END FUNCTION

' Kostal inverter properties (encoding version >= 4.0)
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' tDe$     Type Designator
' sNum%    Number of Strings
' pNum%    Number of AC Phases
' pC%      Performance category (Watt)
FUNCTION kostalProperties(server$, addr%, timeout%, tDe$,sNum%, pNum%, pC%)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H90, 35, rp$)
 IF err% =0 THEN
  tDe$=mid$(rp$,6,16)
  pNum%=asc(mid$(rp$,22,1))
  sNum%=asc(mid$(rp$,28,1))
  pNum%=conv("ble/i32",mid$(rp$,29,4))
 ENDIF
 kostalProperties=err%
END FUNCTION

' Kostal inverter analog input
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' aNa1     Analog Input 1
' aNa2     Analog Input 2
' aNa3     Analog Input 3
' aNa4     Analog Input 4
FUNCTION kostalAnalog(server$, addr%, timeout%, aNa1, aNa2, aNa3, aNa4)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H6A, 15, rp$)
 IF err% =0 THEN
  aNa1=conv("ble/i16",mid$(rp$,8,2))*10.0/1023.0
  aNa2=conv("ble/i16",mid$(rp$,10,2))*10.0/1023.0
  aNa3=conv("ble/i16",mid$(rp$,12,2))*10.0/1023.0
  aNa4=conv("ble/i16",mid$(rp$,14,2))*10.0/1023.0
 ENDIF
 kostalAnalog=err%
END FUNCTION

' Kostal inverter feedin
' server$  IP address of the inverter
' addr%    Inverter Address
' timeout% Timeout in ms
' Tfeed%   Feed-in time of the inverter
FUNCTION kostalFeedin(server$, addr%, timeout%, Tfeed%)
 LOCAL err%, rp$
 err%=kostalTransfer(server$, addr%, timeout%, &H46, 11, rp$)
 IF err% =0 THEN
  Tfeed%=conv("ble/i32",mid$(rp$,6,4))
 ENDIF
 kostalFeedin=err%
END FUNCTION

' Kostal inverter data transfer
' server$ IP address of the inverter
' addr%    inverter address
' timeout% timeout in ms
' magic%   magic command byte
' rpl%     inverter expected response length
' rp$      inverter response
' return   < 0 on error
FUNCTION kostalTransfer(server$, addr%, timeout%, magic%, rpl%, rp$)
 LOCAL con%, n%, ck%, rq$, tk%

 tk%=Ticks()
 ' Open connection to the inverter
 con%=SocketClient( 1, server$, 81 )
 IF con% <0 THEN
  ' no connection
  PRINT "kostal connection problem"
  kostalTransfer=con%
  EXIT FUNCTION
 ENDIF
 n%=SocketOption(con%,"SO_RCVTIMEO",timeout%)
 n%=SocketOption(con%,"SO_SNDTIMEO",timeout%)
 ' e.g. 0x65 is 0xa8-0x43
 ck%=(0-(&H65+magic%+(2*addr%))) AND 255
 'PRINT "kostalTransfer", ck%
 rq$=chr$(&H62)+chr$(addr%)+chr$(3)+chr$(addr%)+chr$(0)+chr$(magic%)+chr$(ck%)+chr$(0)
 n%=SocketWrite( con%, rq$)
 rp$=SocketRead$(con%,rpl%)
 n%=SocketClose( con% )

 IF len(rp$) <> rpl% THEN
  PRINT "kostalTransfer unexpected len", len(rp$),rpl%, Ticks()-tk%
  kostalTransfer=-1
  EXIT FUNCTION
 ENDIF
 kostalTransfer=0
END FUNCTION

' Convert Status Enum from Inverter into Text
' return status text
FUNCTION kostalInverterStatus$(status%, fault%)
  LOCAL st$
  IF fault% THEN
    st$="Fault"
  ELSE
    SELECT CASE status%
      CASE 0
        st$="Off"
      CASE 1
        st$="Standby"
      CASE 2
        st$="Starting"
      CASE 3
        st$="MPPT"
      CASE 4
        st$="Throttled"
      CASE 5
        st$="Feed-In"
    END SELECT
  ENDIF
  kostalInverterStatus$=st$
END FUNCTION
